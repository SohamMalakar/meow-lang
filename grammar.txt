statements  : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr        : IDENTIFIER (LSQUARE expr RSQUARE)* EQ|ASSIGN expr
            : term ((PLUS|MINUS) term)*

term        : subscript ((MUL|DIV) subscript)*

subscript   : call (LSQUARE expr RSQUARE)*

call        : factor (LPAREN (expr (COMMA expr)*)? RPAREN)*

factor      : INT|FLOAT|BOOL|STRING|NONE|IDENTIFIER
            : (PLUS|MINUS) factor
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:if expr KEYWORD:then
              (expr if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:elif expr KEYWORD:then
              (expr if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:else
              expr
            | (NEWLINE statements KEYWORD:end)

while-expr  : KEYWORD:while expr KEYWORD:then
              expr
            | (NEWLINE statements KEYWORD:end)

func-def    : KEYWORD:def IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:end)