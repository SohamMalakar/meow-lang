statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:return expr?
            : KEYWORD:break
            : KEYWORD:continue
            : expr

expr        : IDENTIFIER EQ|ASSIGN expr
            : or-expr

or-expr     : and-expr (KEYWORD:or and-expr)*

and-expr    : comp-expr (KEYWORD:and comp-expr)*

comp-expr   : KEYWORD:not comp-expr
            : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV|INTDIV|MOD) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom ((LPAREN (expr (COMMA expr)*)? RPAREN)|(LSQUARE expr RSQUARE))*

atom        : INT|FLOAT|BOOL|STRING|NONE|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:if expr KEYWORD:then
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:elif expr KEYWORD:then
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:else
              statement
            | (NEWLINE statements KEYWORD:end)

while-expr  : KEYWORD:while expr KEYWORD:then
              statement
            | (NEWLINE statements KEYWORD:end)

func-def    : KEYWORD:def IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:end)